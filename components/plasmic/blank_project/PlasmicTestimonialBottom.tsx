// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: akQUwPYY2eStENCEGYmmQw
// Component: lJBkLAW_9b
import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";

import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/host";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";

import { useScreenVariants as useScreenVariantshKdOjWx6MiWhf } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: HKdOJWx6MIWhf/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "./plasmic_blank_project.module.css"; // plasmic-import: akQUwPYY2eStENCEGYmmQw/projectcss
import sty from "./PlasmicTestimonialBottom.module.css"; // plasmic-import: lJBkLAW_9b/css

export type PlasmicTestimonialBottom__VariantMembers = {};

export type PlasmicTestimonialBottom__VariantsArgs = {};
type VariantPropType = keyof PlasmicTestimonialBottom__VariantsArgs;
export const PlasmicTestimonialBottom__VariantProps =
  new Array<VariantPropType>();

export type PlasmicTestimonialBottom__ArgsType = {
  children?: React.ReactNode;
  slot?: React.ReactNode;
};

type ArgPropType = keyof PlasmicTestimonialBottom__ArgsType;
export const PlasmicTestimonialBottom__ArgProps = new Array<ArgPropType>(
  "children",
  "slot"
);

export type PlasmicTestimonialBottom__OverridesType = {
  root?: p.Flex<"div">;
  quotation2?: p.Flex<"div">;
  testimonialBottom2?: p.Flex<"div">;
  quote?: p.Flex<"div">;
  testimonialProfile2?: p.Flex<"div">;
  profileImg2?: p.Flex<"div">;
  profileInfo2?: p.Flex<"div">;
};

export interface DefaultTestimonialBottomProps {
  children?: React.ReactNode;
  slot?: React.ReactNode;
  className?: string;
}

function PlasmicTestimonialBottom__RenderFunc(props: {
  variants: PlasmicTestimonialBottom__VariantsArgs;
  args: PlasmicTestimonialBottom__ArgsType;
  overrides: PlasmicTestimonialBottom__OverridesType;

  forNode?: string;
}) {
  const { variants, args, overrides, forNode } = props;

  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariantshKdOjWx6MiWhf()
  });

  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        sty.root
      )}
    >
      <div
        data-plasmic-name={"quotation2"}
        data-plasmic-override={overrides.quotation2}
        className={classNames(projectcss.all, sty.quotation2)}
      >
        <div
          className={classNames(
            projectcss.all,
            projectcss.__wab_text,
            sty.text__nrsDk
          )}
        >
          {"‚Äù"}
        </div>
      </div>

      {true ? (
        <p.Stack
          as={"div"}
          data-plasmic-name={"testimonialBottom2"}
          data-plasmic-override={overrides.testimonialBottom2}
          hasGap={true}
          className={classNames(projectcss.all, sty.testimonialBottom2)}
        >
          <div
            data-plasmic-name={"quote"}
            data-plasmic-override={overrides.quote}
            className={classNames(projectcss.all, sty.quote)}
          >
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text___9Yr9N
              )}
            >
              {
                "I want to thank agent Chouhan and his team for the excellent services they provided for me and my family through the entire process of selling my home. They are professionals in real estate with the highest quality in Queens!"
              }
            </div>
          </div>

          <div
            data-plasmic-name={"testimonialProfile2"}
            data-plasmic-override={overrides.testimonialProfile2}
            className={classNames(projectcss.all, sty.testimonialProfile2)}
          >
            <div
              data-plasmic-name={"profileImg2"}
              data-plasmic-override={overrides.profileImg2}
              className={classNames(projectcss.all, sty.profileImg2)}
            />

            <p.Stack
              as={"div"}
              data-plasmic-name={"profileInfo2"}
              data-plasmic-override={overrides.profileInfo2}
              hasGap={true}
              className={classNames(projectcss.all, sty.profileInfo2)}
            >
              {p.renderPlasmicSlot({
                defaultContents: "Sunny Patel",
                value: args.children,
                className: classNames(sty.slotTargetChildren)
              })}

              {p.renderPlasmicSlot({
                defaultContents: "Home Buyer from Bayside",
                value: args.slot,
                className: classNames(sty.slotTargetSlot)
              })}
            </p.Stack>
          </div>
        </p.Stack>
      ) : null}
    </div>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "quotation2",
    "testimonialBottom2",
    "quote",
    "testimonialProfile2",
    "profileImg2",
    "profileInfo2"
  ],
  quotation2: ["quotation2"],
  testimonialBottom2: [
    "testimonialBottom2",
    "quote",
    "testimonialProfile2",
    "profileImg2",
    "profileInfo2"
  ],
  quote: ["quote"],
  testimonialProfile2: ["testimonialProfile2", "profileImg2", "profileInfo2"],
  profileImg2: ["profileImg2"],
  profileInfo2: ["profileInfo2"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  typeof PlasmicDescendants[T][number];
type NodeDefaultElementType = {
  root: "div";
  quotation2: "div";
  testimonialBottom2: "div";
  quote: "div";
  testimonialProfile2: "div";
  profileImg2: "div";
  profileInfo2: "div";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicTestimonialBottom__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicTestimonialBottom__VariantsArgs;
    args?: PlasmicTestimonialBottom__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicTestimonialBottom__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicTestimonialBottom__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicTestimonialBottom__ArgProps,
      internalVariantPropNames: PlasmicTestimonialBottom__VariantProps
    });

    return PlasmicTestimonialBottom__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicTestimonialBottom";
  } else {
    func.displayName = `PlasmicTestimonialBottom.${nodeName}`;
  }
  return func;
}

export const PlasmicTestimonialBottom = Object.assign(
  // Top-level PlasmicTestimonialBottom renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    quotation2: makeNodeComponent("quotation2"),
    testimonialBottom2: makeNodeComponent("testimonialBottom2"),
    quote: makeNodeComponent("quote"),
    testimonialProfile2: makeNodeComponent("testimonialProfile2"),
    profileImg2: makeNodeComponent("profileImg2"),
    profileInfo2: makeNodeComponent("profileInfo2"),

    // Metadata about props expected for PlasmicTestimonialBottom
    internalVariantProps: PlasmicTestimonialBottom__VariantProps,
    internalArgProps: PlasmicTestimonialBottom__ArgProps
  }
);

export default PlasmicTestimonialBottom;
/* prettier-ignore-end */
