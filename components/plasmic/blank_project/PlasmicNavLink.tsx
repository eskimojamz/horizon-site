// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: akQUwPYY2eStENCEGYmmQw
// Component: Jgo1m2OV7s
import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";

import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/host";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "./plasmic_blank_project.module.css"; // plasmic-import: akQUwPYY2eStENCEGYmmQw/projectcss
import sty from "./PlasmicNavLink.module.css"; // plasmic-import: Jgo1m2OV7s/css

export type PlasmicNavLink__VariantMembers = {
  activeState: "active" | "inactive";
};

export type PlasmicNavLink__VariantsArgs = {
  activeState?: SingleChoiceArg<"active" | "inactive">;
};

type VariantPropType = keyof PlasmicNavLink__VariantsArgs;
export const PlasmicNavLink__VariantProps = new Array<VariantPropType>(
  "activeState"
);

export type PlasmicNavLink__ArgsType = {
  children?: React.ReactNode;
};

type ArgPropType = keyof PlasmicNavLink__ArgsType;
export const PlasmicNavLink__ArgProps = new Array<ArgPropType>("children");

export type PlasmicNavLink__OverridesType = {
  root?: p.Flex<"div">;
  link?: p.Flex<"a"> & Partial<LinkProps>;
};

export interface DefaultNavLinkProps {
  children?: React.ReactNode;
  activeState?: SingleChoiceArg<"active" | "inactive">;
  className?: string;
}

function PlasmicNavLink__RenderFunc(props: {
  variants: PlasmicNavLink__VariantsArgs;
  args: PlasmicNavLink__ArgsType;
  overrides: PlasmicNavLink__OverridesType;

  forNode?: string;
}) {
  const { variants, args, overrides, forNode } = props;

  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        sty.root,
        {
          [sty.rootactiveState_active]: hasVariant(
            variants,
            "activeState",
            "active"
          ),
          [sty.rootactiveState_inactive]: hasVariant(
            variants,
            "activeState",
            "inactive"
          )
        }
      )}
    >
      <p.PlasmicLink
        data-plasmic-name={"link"}
        data-plasmic-override={overrides.link}
        className={classNames(projectcss.all, projectcss.a, sty.link, {
          [sty.linkactiveState_active]: hasVariant(
            variants,
            "activeState",
            "active"
          ),
          [sty.linkactiveState_inactive]: hasVariant(
            variants,
            "activeState",
            "inactive"
          )
        })}
        component={Link}
        platform={"nextjs"}
      >
        {p.renderPlasmicSlot({
          defaultContents: "NavLink",
          value: args.children,
          className: classNames(sty.slotTargetChildren, {
            [sty.slotTargetChildrenactiveState_active]: hasVariant(
              variants,
              "activeState",
              "active"
            ),
            [sty.slotTargetChildrenactiveState_inactive]: hasVariant(
              variants,
              "activeState",
              "inactive"
            )
          })
        })}
      </p.PlasmicLink>
    </div>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root", "link"],
  link: ["link"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  typeof PlasmicDescendants[T][number];
type NodeDefaultElementType = {
  root: "div";
  link: "a";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicNavLink__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicNavLink__VariantsArgs;
    args?: PlasmicNavLink__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicNavLink__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicNavLink__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicNavLink__ArgProps,
      internalVariantPropNames: PlasmicNavLink__VariantProps
    });

    return PlasmicNavLink__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicNavLink";
  } else {
    func.displayName = `PlasmicNavLink.${nodeName}`;
  }
  return func;
}

export const PlasmicNavLink = Object.assign(
  // Top-level PlasmicNavLink renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    link: makeNodeComponent("link"),

    // Metadata about props expected for PlasmicNavLink
    internalVariantProps: PlasmicNavLink__VariantProps,
    internalArgProps: PlasmicNavLink__ArgProps
  }
);

export default PlasmicNavLink;
/* prettier-ignore-end */
