// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: akQUwPYY2eStENCEGYmmQw
// Component: JkywaSAd1fF
import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";

import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/host";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import NavLink from "../../NavLink"; // plasmic-import: Jgo1m2OV7s/component

import { useScreenVariants as useScreenVariantshKdOjWx6MiWhf } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: HKdOJWx6MIWhf/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "./plasmic_blank_project.module.css"; // plasmic-import: akQUwPYY2eStENCEGYmmQw/projectcss
import sty from "./PlasmicNavbar.module.css"; // plasmic-import: JkywaSAd1fF/css

import CallIcon from "./icons/PlasmicIcon__Call"; // plasmic-import: kxgRTdr1ZWq/icon

export type PlasmicNavbar__VariantMembers = {};

export type PlasmicNavbar__VariantsArgs = {};
type VariantPropType = keyof PlasmicNavbar__VariantsArgs;
export const PlasmicNavbar__VariantProps = new Array<VariantPropType>();

export type PlasmicNavbar__ArgsType = {};
type ArgPropType = keyof PlasmicNavbar__ArgsType;
export const PlasmicNavbar__ArgProps = new Array<ArgPropType>();

export type PlasmicNavbar__OverridesType = {
  root?: p.Flex<"div">;
  logoContainer?: p.Flex<"div">;
  img?: p.Flex<typeof p.PlasmicImg>;
  textLogo?: p.Flex<"div">;
  navLinksContainer?: p.Flex<"div">;
  phoneLink?: p.Flex<"div">;
  svg?: p.Flex<"svg">;
};

export interface DefaultNavbarProps {
  className?: string;
}

function PlasmicNavbar__RenderFunc(props: {
  variants: PlasmicNavbar__VariantsArgs;
  args: PlasmicNavbar__ArgsType;
  overrides: PlasmicNavbar__OverridesType;

  forNode?: string;
}) {
  const { variants, args, overrides, forNode } = props;

  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariantshKdOjWx6MiWhf()
  });

  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        sty.root
      )}
    >
      <p.Stack
        as={"div"}
        data-plasmic-name={"logoContainer"}
        data-plasmic-override={overrides.logoContainer}
        hasGap={true}
        className={classNames(projectcss.all, sty.logoContainer)}
      >
        <p.PlasmicImg
          data-plasmic-name={"img"}
          data-plasmic-override={overrides.img}
          alt={""}
          className={classNames(sty.img)}
          displayHeight={"36px" as const}
          displayMaxHeight={"none" as const}
          displayMaxWidth={"100%" as const}
          displayMinHeight={"0" as const}
          displayMinWidth={"0" as const}
          displayWidth={
            hasVariant(globalVariants, "screen", "desktop")
              ? ("36px" as const)
              : ("36px" as const)
          }
          loading={"lazy" as const}
          src={"/plasmic/blank_project/images/logo.svg"}
        />

        <div
          data-plasmic-name={"textLogo"}
          data-plasmic-override={overrides.textLogo}
          className={classNames(projectcss.all, sty.textLogo)}
        >
          <div
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text__b8I4A
            )}
          >
            {hasVariant(globalVariants, "screen", "mobileOnly")
              ? "Horizon Development"
              : "Horizon Development"}
          </div>
        </div>
      </p.Stack>

      {(hasVariant(globalVariants, "screen", "mobileOnly") ? true : true) ? (
        <p.Stack
          as={"div"}
          data-plasmic-name={"navLinksContainer"}
          data-plasmic-override={overrides.navLinksContainer}
          hasGap={true}
          className={classNames(projectcss.all, sty.navLinksContainer)}
        >
          <NavLink
            activeState={"inactive" as const}
            className={classNames("__wab_instance", sty.navLink__qw4Cy)}
          >
            {"Communities"}
          </NavLink>

          <NavLink
            activeState={"inactive" as const}
            className={classNames("__wab_instance", sty.navLink__tKx0D)}
          >
            {"Listings"}
          </NavLink>

          <NavLink
            activeState={"inactive" as const}
            className={classNames("__wab_instance", sty.navLink__o73Wc)}
          >
            {"Agents"}
          </NavLink>

          <NavLink
            activeState={"inactive" as const}
            className={classNames("__wab_instance", sty.navLink__yJimb)}
          >
            {"About"}
          </NavLink>
        </p.Stack>
      ) : null}
      {(hasVariant(globalVariants, "screen", "mobileOnly") ? true : true) ? (
        <p.Stack
          as={"div"}
          data-plasmic-name={"phoneLink"}
          data-plasmic-override={overrides.phoneLink}
          hasGap={true}
          className={classNames(projectcss.all, sty.phoneLink)}
        >
          <CallIcon
            data-plasmic-name={"svg"}
            data-plasmic-override={overrides.svg}
            className={classNames(projectcss.all, sty.svg)}
            role={"img"}
          />

          <div
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text__axtrU
            )}
          >
            {"718-3322-3232"}
          </div>
        </p.Stack>
      ) : null}
    </div>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "logoContainer",
    "img",
    "textLogo",
    "navLinksContainer",
    "phoneLink",
    "svg"
  ],
  logoContainer: ["logoContainer", "img", "textLogo"],
  img: ["img"],
  textLogo: ["textLogo"],
  navLinksContainer: ["navLinksContainer"],
  phoneLink: ["phoneLink", "svg"],
  svg: ["svg"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  typeof PlasmicDescendants[T][number];
type NodeDefaultElementType = {
  root: "div";
  logoContainer: "div";
  img: typeof p.PlasmicImg;
  textLogo: "div";
  navLinksContainer: "div";
  phoneLink: "div";
  svg: "svg";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicNavbar__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicNavbar__VariantsArgs;
    args?: PlasmicNavbar__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicNavbar__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicNavbar__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicNavbar__ArgProps,
      internalVariantPropNames: PlasmicNavbar__VariantProps
    });

    return PlasmicNavbar__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicNavbar";
  } else {
    func.displayName = `PlasmicNavbar.${nodeName}`;
  }
  return func;
}

export const PlasmicNavbar = Object.assign(
  // Top-level PlasmicNavbar renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    logoContainer: makeNodeComponent("logoContainer"),
    img: makeNodeComponent("img"),
    textLogo: makeNodeComponent("textLogo"),
    navLinksContainer: makeNodeComponent("navLinksContainer"),
    phoneLink: makeNodeComponent("phoneLink"),
    svg: makeNodeComponent("svg"),

    // Metadata about props expected for PlasmicNavbar
    internalVariantProps: PlasmicNavbar__VariantProps,
    internalArgProps: PlasmicNavbar__ArgProps
  }
);

export default PlasmicNavbar;
/* prettier-ignore-end */
