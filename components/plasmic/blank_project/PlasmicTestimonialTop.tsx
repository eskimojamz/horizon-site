// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: akQUwPYY2eStENCEGYmmQw
// Component: Ou_f7MnAVP
import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";

import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/host";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";

import { useScreenVariants as useScreenVariantshKdOjWx6MiWhf } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: HKdOJWx6MIWhf/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "./plasmic_blank_project.module.css"; // plasmic-import: akQUwPYY2eStENCEGYmmQw/projectcss
import sty from "./PlasmicTestimonialTop.module.css"; // plasmic-import: Ou_f7MnAVP/css

export type PlasmicTestimonialTop__VariantMembers = {};

export type PlasmicTestimonialTop__VariantsArgs = {};
type VariantPropType = keyof PlasmicTestimonialTop__VariantsArgs;
export const PlasmicTestimonialTop__VariantProps = new Array<VariantPropType>();

export type PlasmicTestimonialTop__ArgsType = {
  imageSrc?: string;
  name?: React.ReactNode;
  buyerLocation?: React.ReactNode;
  quoteText?: React.ReactNode;
};

type ArgPropType = keyof PlasmicTestimonialTop__ArgsType;
export const PlasmicTestimonialTop__ArgProps = new Array<ArgPropType>(
  "imageSrc",
  "name",
  "buyerLocation",
  "quoteText"
);

export type PlasmicTestimonialTop__OverridesType = {
  root?: p.Flex<"div">;
  quotation?: p.Flex<"div">;
  text?: p.Flex<"div">;
  testimonialBottom?: p.Flex<"div">;
  testimonialText?: p.Flex<"div">;
  freeBox?: p.Flex<"div">;
  testimonialProfile?: p.Flex<"div">;
  profileImg?: p.Flex<"div">;
  profileInfo?: p.Flex<"div">;
};

export interface DefaultTestimonialTopProps {
  imageSrc?: string;
  name?: React.ReactNode;
  buyerLocation?: React.ReactNode;
  quoteText?: React.ReactNode;
  className?: string;
}

function PlasmicTestimonialTop__RenderFunc(props: {
  variants: PlasmicTestimonialTop__VariantsArgs;
  args: PlasmicTestimonialTop__ArgsType;
  overrides: PlasmicTestimonialTop__OverridesType;

  forNode?: string;
}) {
  const { variants, args, overrides, forNode } = props;

  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariantshKdOjWx6MiWhf()
  });

  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        sty.root
      )}
    >
      <div
        data-plasmic-name={"quotation"}
        data-plasmic-override={overrides.quotation}
        className={classNames(projectcss.all, sty.quotation)}
      >
        <div
          data-plasmic-name={"text"}
          data-plasmic-override={overrides.text}
          className={classNames(
            projectcss.all,
            projectcss.__wab_text,
            sty.text
          )}
        >
          {"”"}
        </div>
      </div>

      {true ? (
        <p.Stack
          as={"div"}
          data-plasmic-name={"testimonialBottom"}
          data-plasmic-override={overrides.testimonialBottom}
          hasGap={true}
          className={classNames(projectcss.all, sty.testimonialBottom)}
        >
          <div
            data-plasmic-name={"testimonialText"}
            data-plasmic-override={overrides.testimonialText}
            className={classNames(projectcss.all, sty.testimonialText)}
          >
            <div
              data-plasmic-name={"freeBox"}
              data-plasmic-override={overrides.freeBox}
              className={classNames(projectcss.all, sty.freeBox)}
            >
              {p.renderPlasmicSlot({
                defaultContents:
                  "The folks at Horizon Development\nhelped me every step of the way in buying my first home. They negotiated on my behalf to lower the final buying price and I couldn’t be happier. I’d highly recommend their services to anyone looking to buy a home in New York.",
                value: args.quoteText,
                className: classNames(sty.slotTargetQuoteText)
              })}
            </div>
          </div>

          <div
            data-plasmic-name={"testimonialProfile"}
            data-plasmic-override={overrides.testimonialProfile}
            className={classNames(projectcss.all, sty.testimonialProfile)}
          >
            <div
              data-plasmic-name={"profileImg"}
              data-plasmic-override={overrides.profileImg}
              className={classNames(projectcss.all, sty.profileImg)}
            />

            <p.Stack
              as={"div"}
              data-plasmic-name={"profileInfo"}
              data-plasmic-override={overrides.profileInfo}
              hasGap={true}
              className={classNames(projectcss.all, sty.profileInfo)}
            >
              {p.renderPlasmicSlot({
                defaultContents: "Alan Lippi",
                value: args.name,
                className: classNames(sty.slotTargetName)
              })}

              {p.renderPlasmicSlot({
                defaultContents: "Home Buyer from Syosset",
                value: args.buyerLocation,
                className: classNames(sty.slotTargetBuyerLocation)
              })}
            </p.Stack>
          </div>
        </p.Stack>
      ) : null}
    </div>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "quotation",
    "text",
    "testimonialBottom",
    "testimonialText",
    "freeBox",
    "testimonialProfile",
    "profileImg",
    "profileInfo"
  ],
  quotation: ["quotation", "text"],
  text: ["text"],
  testimonialBottom: [
    "testimonialBottom",
    "testimonialText",
    "freeBox",
    "testimonialProfile",
    "profileImg",
    "profileInfo"
  ],
  testimonialText: ["testimonialText", "freeBox"],
  freeBox: ["freeBox"],
  testimonialProfile: ["testimonialProfile", "profileImg", "profileInfo"],
  profileImg: ["profileImg"],
  profileInfo: ["profileInfo"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  typeof PlasmicDescendants[T][number];
type NodeDefaultElementType = {
  root: "div";
  quotation: "div";
  text: "div";
  testimonialBottom: "div";
  testimonialText: "div";
  freeBox: "div";
  testimonialProfile: "div";
  profileImg: "div";
  profileInfo: "div";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicTestimonialTop__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicTestimonialTop__VariantsArgs;
    args?: PlasmicTestimonialTop__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicTestimonialTop__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicTestimonialTop__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicTestimonialTop__ArgProps,
      internalVariantPropNames: PlasmicTestimonialTop__VariantProps
    });

    return PlasmicTestimonialTop__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicTestimonialTop";
  } else {
    func.displayName = `PlasmicTestimonialTop.${nodeName}`;
  }
  return func;
}

export const PlasmicTestimonialTop = Object.assign(
  // Top-level PlasmicTestimonialTop renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    quotation: makeNodeComponent("quotation"),
    text: makeNodeComponent("text"),
    testimonialBottom: makeNodeComponent("testimonialBottom"),
    testimonialText: makeNodeComponent("testimonialText"),
    freeBox: makeNodeComponent("freeBox"),
    testimonialProfile: makeNodeComponent("testimonialProfile"),
    profileImg: makeNodeComponent("profileImg"),
    profileInfo: makeNodeComponent("profileInfo"),

    // Metadata about props expected for PlasmicTestimonialTop
    internalVariantProps: PlasmicTestimonialTop__VariantProps,
    internalArgProps: PlasmicTestimonialTop__ArgProps
  }
);

export default PlasmicTestimonialTop;
/* prettier-ignore-end */
